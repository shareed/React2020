{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\shan_\\\\Documents\\\\Web Development\\\\Notes\\\\React\\\\managing-forms2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\shan_\\\\Documents\\\\Web Development\\\\Notes\\\\React\\\\managing-forms2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\shan_\\\\Documents\\\\Web Development\\\\Notes\\\\React\\\\managing-forms2\\\\src\\\\components\\\\NoteForm.js\";\nimport React, { useState } from \"react\"; // props = { addNewNote: fn addNewNote} // use obj destructing in props to pull addNewNote from props as a parameter\n\nconst NoteForm = ({\n  addNewNote\n}) => {\n  // Step 3: Set up state for FORM stored in note object. Note this is separate from index.js 'notes'\n  const _useState = useState({\n    title: \"\",\n    body: \"\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        note = _useState2[0],\n        setNote = _useState2[1]; // Step 4: Set up onChange event when input text changes (similar to our onClick event used with buttons)\n  // This uses https://reactjs.org/docs/events.html#form-events\n\n\n  const handleChanges = event => {\n    // Step 5: Use text input value to update state\n    // Step 12: Refactor inputs and handleChanges to use \"name\" in updating state\n    // event --> Synthetic Event from React\n    // event.target --> DOM element that fired event\n    // event.target.name --> name attribute value on element that fired event\n    // event.target.value --> value of element that fired event.\n    // computed properties... instead of using a string as the key, calculate\n    // the key inside of [event.target.name] and then set that key to the value. \n    // object spread...incorporate the entire object, and then overwrite key/value pair with computed properties.\n    setNote(_objectSpread(_objectSpread({}, note), {}, {\n      [event.target.name]: event.target.value\n    })); // recommended\n  };\n\n  console.log(\"note state\", note); // Step 8: Create submit form function with addNewNote prop\n  // Step 13: Clear form onSubmit\n\n  const submitForm = event => {\n    event.preventDefault(); // prevent default <form> submit behavior\n\n    addNewNote(note); // pull addNewNotes from props, pass NoteForm state and add to App state with array spread\n\n    setNote({\n      title: \"\",\n      body: \"\"\n    }); // reset form after adding to app state.\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"title\",\n    type: \"text\",\n    placeholder: \"Enter title\",\n    value: note.title,\n    name: \"title\",\n    onChange: handleChanges,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \"Note\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"note\",\n    placeholder: \"Add your note\",\n    value: note.body,\n    name: \"body\",\n    onChange: handleChanges,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"Add Note\"));\n};\n\nexport default NoteForm;","map":{"version":3,"sources":["C:/Users/shan_/Documents/Web Development/Notes/React/managing-forms2/src/components/NoteForm.js"],"names":["React","useState","NoteForm","addNewNote","title","body","note","setNote","handleChanges","event","target","name","value","console","log","submitForm","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AACnC;AADmC,oBAEXF,QAAQ,CAAC;AAAEG,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,IAAI,EAAE;AAAnB,GAAD,CAFG;AAAA;AAAA,QAE5BC,IAF4B;AAAA,QAEtBC,OAFsB,kBAGnC;AACA;;;AACA,QAAMC,aAAa,GAAGC,KAAK,IAAI;AAC7B;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACAF,IAAAA,OAAO,iCAAMD,IAAN;AAAY,OAACG,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE;AAA9C,OAAP,CAd6B,CAckC;AAChE,GAfD;;AAiBAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BR,IAA1B,EAtBmC,CAwBnC;AACA;;AACA,QAAMS,UAAU,GAAGN,KAAK,IAAI;AAC1BA,IAAAA,KAAK,CAACO,cAAN,GAD0B,CACF;;AACxBb,IAAAA,UAAU,CAACG,IAAD,CAAV,CAF0B,CAER;;AAClBC,IAAAA,OAAO,CAAC;AAAEH,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KAAD,CAAP,CAH0B,CAGQ;AACnC,GAJD;;AAKA,sBACE;AAAM,IAAA,QAAQ,EAAEU,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,eAIE;AACE,IAAA,EAAE,EAAC,OADL;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,WAAW,EAAC,aAHd;AAIE,IAAA,KAAK,EAAET,IAAI,CAACF,KAJd;AAKE,IAAA,IAAI,EAAC,OALP;AAME,IAAA,QAAQ,EAAEI,aANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,eAeE;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF,eAgBE;AACE,IAAA,EAAE,EAAC,MADL;AAEE,IAAA,WAAW,EAAC,eAFd;AAGE,IAAA,KAAK,EAAEF,IAAI,CAACD,IAHd;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,QAAQ,EAAEG,aALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,eAyBE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzBF,CADF;AA6BD,CA5DD;;AA8DA,eAAeN,QAAf","sourcesContent":["import React, { useState } from \"react\";\n\n// props = { addNewNote: fn addNewNote} // use obj destructing in props to pull addNewNote from props as a parameter\nconst NoteForm = ({ addNewNote }) => {\n  // Step 3: Set up state for FORM stored in note object. Note this is separate from index.js 'notes'\n  const [note, setNote] = useState({ title: \"\", body: \"\" });\n  // Step 4: Set up onChange event when input text changes (similar to our onClick event used with buttons)\n  // This uses https://reactjs.org/docs/events.html#form-events\n  const handleChanges = event => {\n    // Step 5: Use text input value to update state\n    // Step 12: Refactor inputs and handleChanges to use \"name\" in updating state\n    \n    // event --> Synthetic Event from React\n    // event.target --> DOM element that fired event\n    // event.target.name --> name attribute value on element that fired event\n    // event.target.value --> value of element that fired event.\n\n\n    // computed properties... instead of using a string as the key, calculate\n    // the key inside of [event.target.name] and then set that key to the value. \n\n    // object spread...incorporate the entire object, and then overwrite key/value pair with computed properties.\n    setNote({ ...note, [event.target.name]: event.target.value }); // recommended\n  };\n\n  console.log(\"note state\", note);\n\n  // Step 8: Create submit form function with addNewNote prop\n  // Step 13: Clear form onSubmit\n  const submitForm = event => {\n    event.preventDefault(); // prevent default <form> submit behavior\n    addNewNote(note); // pull addNewNotes from props, pass NoteForm state and add to App state with array spread\n    setNote({ title: \"\", body: \"\" }); // reset form after adding to app state.\n  };\n  return (\n    <form onSubmit={submitForm}>\n      {/* Step 2: Add <label> with htmlFor & update <input> id to create relationship b/t input and label*/}\n      <label htmlFor=\"title\">Title</label>\n      {/* Step 1: Create a basic <form> with <input> type=text inside to set up HTML form */}\n      <input\n        id=\"title\"\n        type=\"text\"\n        placeholder=\"Enter title\"\n        value={note.title} \n        name=\"title\"\n        onChange={handleChanges}\n      />\n      {/* Step 10: Setting Value with State in <input>*/}\n\n      {/* Step 11: Add note <textarea> and update note state and  */}\n      <label htmlFor=\"note\">Note</label>\n      <textarea\n        id=\"note\"\n        placeholder=\"Add your note\"\n        value={note.body}\n        name=\"body\"\n        onChange={handleChanges}\n      />\n      {/* Step 9: Submit form with button and onSubmit. \n      Set the button type to submit so that when it's clicked, it triggers the onSubmit event in <form> */}\n      <button type=\"submit\">Add Note</button>\n    </form>\n  );\n};\n\nexport default NoteForm;\n"]},"metadata":{},"sourceType":"module"}